// Code generated by hertz generator.

package relation

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
	relation "minitok/cmd/api/biz/model/douyin/relation"
	"minitok/cmd/api/rpc"
	rpcrelation "minitok/kitex_gen/douyin/relation"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.ActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.ActionResponse)
	rpcResp := new(rpcrelation.ActionResponse)

	rpcResp, err = rpc.RelationAction(ctx, &rpcrelation.ActionRequest{
		Token:      req.Token,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})

	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	if err = copier.Copy(resp, rpcResp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.FollowListResponse)
	rpcResp := new(rpcrelation.FollowListResponse)

	rpcResp, err = rpc.RelationFollowList(ctx, &rpcrelation.FollowListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	if err = copier.Copy(resp, rpcResp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	for i, user := range rpcResp.UserList {
		if err = copier.Copy(resp.UserList[i], user); err != nil {
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp.UserList[i].ID = user.Id
	}

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.FollowerListResponse)
	rpcResp := new(rpcrelation.FollowerListResponse)

	rpcResp, err = rpc.RelationFollowerList(ctx, &rpcrelation.FollowerListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	if err = copier.Copy(resp, rpcResp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	for i, user := range rpcResp.UserList {
		if err = copier.Copy(resp.UserList[i], user); err != nil {
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp.UserList[i].ID = user.Id
	}

	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.FriendListResponse)
	rpcResp := new(rpcrelation.FriendListResponse)

	rpcResp, err = rpc.RelationFriendList(ctx, &rpcrelation.FriendListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	if err = copier.Copy(resp, rpcResp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	for i, user := range rpcResp.UserList {
		if err = copier.Copy(resp.UserList[i], user); err != nil {
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp.UserList[i].ID = user.Id
	}

	c.JSON(consts.StatusOK, resp)
}
