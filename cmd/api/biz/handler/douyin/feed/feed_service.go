// Code generated by hertz generator.

package feed

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
	feed "minitok/cmd/api/biz/model/douyin/feed"
	"minitok/cmd/api/rpc"
	rpcfeed "minitok/kitex_gen/douyin/feed"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req feed.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(feed.FeedResponse)
	rpcResp := new(rpcfeed.FeedResponse)

	rpcResp, err = rpc.Feed(ctx, &rpcfeed.FeedRequest{
		Token:      req.Token,
		LatestTime: req.LatestTime,
	})

	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	if err = copier.Copy(resp, rpcResp); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	for i, video := range rpcResp.VideoList {
		if err = copier.Copy(resp.VideoList[i], video); err != nil {
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp.VideoList[i].ID = video.Id
		resp.VideoList[i].PlayURL = video.PlayUrl
		resp.VideoList[i].CoverURL = video.CoverUrl
		resp.VideoList[i].Author.ID = video.Author.Id
	}

	c.JSON(consts.StatusOK, resp)
}
